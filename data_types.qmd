---
code-links:
  - text: 03_Data_Types.R
    icon: file-code
    href: code/03_Data_Types.R
---

# Data Types

## Objectives

- Learn about the basic data types, including `numeric`, `logical`, and `character`
- Learn how to identify the data type of an object
- Learn how to change the data type of an object

## Identification

To identify the data type of an object, you can use the `class()` function. Let's use the `class()` function on the `x` variable we created in the last section:

```{r}
x <- 2 # reassign your variable if you need to
class(x) # call the class() function on x
```

As you can see, our `class()` function showed us that `x`, which holds a `2`, is a of the `numeric` data type. We will use this `class()` function throughout this section to test our understanding.

## Numbers

There are 3 types of number data types in R, but you will usually just use the `numeric` type.

### The `numeric` data type

The `numeric` data type can represent any number (negative or positive), with any amount of decimals. There are a lot of ways to manipulate these numbers in R. For example:

```{r}
class(2)
class(3.14)
class(-0.4621473)
```

When dealing with decimals, you can round numbers or floor them using the `round()` and `floor()` functions.

```{r}
round(3.56)
floor(3.56)
```

### The `integer` data type

The `integer` data type stores just integers in the range of $-2,000,000,000$ to $2,000,000,000$. This data type is rarely used in practice, but it helps to illustrate the nuance of some data types and why its important to check what something is.

```{r}
i <- as.integer(5)
i
class(i)
class(5)
```

Notice that you need to explicitly set the variable with the `as.integer()` function because the output looks exactly the same as if you set `i <- 5`. The primary difference between the two is size. If you have a very large amount of numbers you need to store, and they are all integers, the `integer` data type may be more appropriate.

### The `complex` data type

The `complex` data type is also rarely used, but is sometimes necessary in mathematical or engineering applications. This data type is used to represent complex numbers.

```{r}
c <- 3+2i
c
class(c)
```

Unlike the `integer` data type, `complex` objects ar automatically detected by R if you use the $a+bi$ notation. However, if you want to be extra careful, you can use the `complex()` or `as.complex()` functions.

```{r}
complex(real = 3, imaginary = 2)
as.complex(3+2i)
```

### Special Numbers and Functions

There are a few special numbers and functions to be aware of:

#### Pi, $\pi$ {.unnumbered}

```{r}
pi
```

#### Euler's number, $e$ {.unnumbered}

```{r}
exp(1) # e = e^1
exp(5) # e^5
```

#### Logarithms {.unnumbered}

The `log()` function, by default takes the natural log of a number, $ln()$, but you can specify another base using the the `base` argument.

```{r}
log(2)
log(2, base = 10)
log(2) == log(2, base = exp(1))
```
 
## The `logical` data type

We have already seen the `logical` data type earlier in this workshop. This data type can either be `TRUE` or `FALSE`. Typically, this data type is not created explicitly, but rather through [Boolean Comparisons](basics.html#boolean-comparisons).

```{r}
x <- TRUE # explicitly
class(x)
x
y <- 1 == 1 # boolean comparisons
y
z <- "apples" == "oranges"
z
```

If you use mathematical operations on a `logical` data type, then it will treat `TRUE` as $1$ and `FALSE` as $0$. This can be helpful because you can add together a bunch of `logical` data types to easily see how many cases are `TRUE`.

```{r}
x + y + z # TRUE + TRUE + FALSE = 1 + 1 + 0
```

## The `character` data type

The `character` data type is used to to hold strings of characters.

```{r}
x <- "apple"
class(x)
x
```

Notice that the output from the `class()` function actually output another `character` object which contains the word `"character"`! This illustrates how everything in R is an object.

## Coercion

Sometimes you may need to move between data types, which is known as data type coercion. A common example is moving between `numeric` and `string`.

```{r}
x <- 2
class(x)
x
y <- as.character(x)
class(y)
y
```

Other functions that do data type coercion include:

```{r}
#| eval: false
as.integer()
as.numeric()
as.logical()

# We'll visit these in the next section
as.factor()
as.vector() 
as.data.frame()
```

## Missing Values

In R, a missing value is denoted by `NA`. Any variable can be set to be a missing value, and you can check if a variables is a missing value using the `is.na()` function. The real benefit of missing values is when they are used in data structures, which we will explore in the [next chapter](data_structures.qmd).

```{r}
x <- NA
is.na(x)
x <- 2
is.na(x)
x <- ""
is.na(x)
```

Occasionally you may see `NaN`, which occurs when you divide by zero, for example. It stands for "Not a Number", and can function as an `NA`. However, an `NA` is not considered a `NaN` when using the `is.nan()` function, so be careful. 

```{r}
is.na(NaN)
is.nan(NaN)
is.na(NA)
is.nan(NA)
```

